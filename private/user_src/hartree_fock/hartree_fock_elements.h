//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.90. August 3, 2009.
//LIC// 
//LIC// Copyright (C) 2006-2009 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
//Header file for HartreeFock elements
#ifndef OOMPH_HARTREE_FOCK_ELEMENTS_HEADER
#define OOMPH_HARTREE_FOCK_ELEMENTS_HEADER


// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif


//OOMPH-LIB headers
#include "../generic/nodes.h"
#include "../generic/Qelements.h"
#include "../generic/oomph_utilities.h"
#include "../generic/mesh.h"

namespace oomph
{

//=============================================================
/// A class for all isoparametric elements that solve the 
/// HartreeFock equations.
/// \f[ 
/// \frac{\partial^2 u}{\partial x_i^2} + ... hierher update
/// \f] 
/// This contains the generic maths. Shape functions, geometric
/// mapping etc. must get implemented in derived class.
//=============================================================
template <unsigned DIM>
class HartreeFockEquations : public virtual FiniteElement
{

public:

 /// \short Function pointer to nuclear source function
 typedef void (*NuclearSourceFctPt)(const Vector<double>& x,
                                        double& source);
 
 /// \short Pointer to the precomputed source vectors
 typedef Vector<Vector<double> > (*RepulsionSourcePt);
 typedef Vector<Vector<Vector<double> > > (*ExchangeSourcePt);

 /// Constructor 
 HartreeFockEquations() : Nuclear_source_fct_pt(0),
  Nstored_eigenvectors(0)
  {
   Value_to_be_plotted=0;
  }
 
 /// Broken copy constructor
 HartreeFockEquations(const HartreeFockEquations& dummy) 
  { 
   BrokenCopy::broken_copy("HartreeFockEquations");
  } 
 
 /// Broken assignment operator
 void operator=(const HartreeFockEquations&) 
  {
   BrokenCopy::broken_assign("HartreeFockEquations");
  }

 /// \short Set (globally for all elements of this type) 
 /// which nodal value is to be plotted (a bit hacky but cheaper 
 /// than having to loop over all elements to tell them what to plot...)
 /// Setting value_to_be_plotted > 0 causes the eigenvectors
 /// to be plotted.
 static void set_value_to_be_plotted(const unsigned& value_to_be_plotted)
  {
   Value_to_be_plotted=value_to_be_plotted;
  }


 /// \short Return the index at which the unknown value
 /// is stored. The default value, 0, is appropriate for single-physics
 /// problems, when there is only one variable, the value that satisfies
 /// the hartree_fock equation. 
 /// In derived multi-physics elements, this function should be overloaded
 /// to reflect the chosen storage scheme. Note that these equations require
 /// that the unknown is always stored at the same index at each node.
 virtual inline unsigned u_index_hartree_fock() const {return 0;}

 /// Output with default number of plot points
 void output(std::ostream &outfile) 
  {
   const unsigned n_plot=5;
   output(outfile,n_plot);
  }

 /// \short Output FE representation of soln: x,y,u or x,y,z,u at 
 /// n_plot^DIM plot points
 void output(std::ostream &outfile, const unsigned &n_plot);

 /// C_style output with default number of plot points
 void output(FILE* file_pt)
  {
   const unsigned n_plot=5;
   output(file_pt,n_plot);
  }

 /// \short C-style output FE representation of soln: x,y,u or x,y,z,u at 
 /// n_plot^DIM plot points
 void output(FILE* file_pt, const unsigned &n_plot);

 /// Output exact soln: x,y,u_exact or x,y,z,u_exact at n_plot^DIM plot points
 void output_fct(std::ostream &outfile, const unsigned &n_plot, 
                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt);

 /// \short Output exact soln: x,y,u_exact or x,y,z,u_exact at 
 /// n_plot^DIM plot points (dummy time-dependent version to 
 /// keep intel compiler happy)
 virtual void output_fct(std::ostream &outfile, const unsigned &n_plot,
                         const double& time, 
                         FiniteElement::UnsteadyExactSolutionFctPt 
                         exact_soln_pt)
  {
   throw OomphLibError(
    "There is no time-dependent output_fct() for HartreeFock elements ",
    "HartreeFockEquations<DIM>::output_fct()",
    OOMPH_EXCEPTION_LOCATION);
  }

 ///Create storage for n_stored_eigenvectors eigenvectors 
 void create_storage_for_eigenvectors(const unsigned& n_stored_eigenvectors);

 /// Return the number of eigenvectors for which storage has been allocated
 unsigned nstored_eigenvectors() {return Nstored_eigenvectors;}

 /// \short Copy values currently stored in nodal value 0 into 
 /// storage for e-th eigenvector [e=0....nstored_eigenvectors-1]. 
 /// This requires a two-step process: First the
 /// eigenvectors must be assigned to nodal values, using 
 /// Problem::assign_eigenvector_to_dofs(...), then this function
 /// should be used to store the eigenvectors permanently.
 void store_eigenvector(const unsigned& e);

 /// Get error against and norm of exact solution
 void compute_error(std::ostream &outfile, 
                    FiniteElement::SteadyExactSolutionFctPt exact_soln_pt,
                    double& error, double& norm);


 /// Dummy, time dependent error checker
 void compute_error(std::ostream &outfile, 
                    FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt,
                    const double& time, double& error, double& norm)
  {
   throw OomphLibError(
    "There is no time-dependent compute_error() for HartreeFock elements",
    "HartreeFockEquations<DIM>::compute_error()",
    OOMPH_EXCEPTION_LOCATION);
  }

 /// Access function: Pointer to nuclear source function
 NuclearSourceFctPt& nuclear_source_fct_pt() 
  {return Nuclear_source_fct_pt;}

 /// Access function: Pointer to nuclear source function. Const version
 NuclearSourceFctPt nuclear_source_fct_pt() const 
  {return Nuclear_source_fct_pt;}

 /// Access function: Pointers to source vectors
 RepulsionSourcePt& repulsion_source_pt() {return Repulsion_source_pt;}
 ExchangeSourcePt& exchange_source_pt() {return Exchange_source_pt;}

 /// Access function to assign element number
 void element_number(unsigned& e) {Element_number=e;}

///////////////////////////////////////////////////////////////////////////

 /// Get element number
 inline unsigned get_element_number()
  {
   return Element_number;
  }

////////////////////////////////////////////////////////////////////////////
///GET SOURCE TERMS


 /// Get nuclear source term at (Eulerian) position x. This function is
 /// virtual to allow overloading in multi-physics problems where
 /// the strength of the source function might be determined by
 /// another system of equations.
 /// hierher
 inline virtual void get_nuclear_source(const Vector<double>& x, 
                                        double& nuclear_source) const
  {
   /// If no source function has been set, return one 
   if(Nuclear_source_fct_pt==0) {nuclear_source = 1.0;}
   else
    {
     /// Retrieve nuclear_source value
     (*Nuclear_source_fct_pt)(x,nuclear_source);
    }
  }


 /// Get electron repulsion source term
 inline virtual void get_electron_repulsion(unsigned &e,
                                            unsigned &ept,
                                            double &repulsion_source) const
 {
   /// If no source pointer has been set, return zero 
   if(Repulsion_source_pt==0) {repulsion_source = 0.0;}
   else
    {
     ///  Retrieve repulsion_source value
     repulsion_source = (*Repulsion_source_pt)[e][ept];
    }

 }


 /// Get electron exchange source term
 inline void get_electron_exchange(unsigned &e,
                                   unsigned &ept,
                                   int &j,
                                   double &exchange_source) const
  {
   //If no source pointer has been set, return zero
   if(Exchange_source_pt==0) {exchange_source = 0.0;}
   else
    {
     /// Retrieve exchange_source value
     exchange_source = (*Exchange_source_pt)[e][ept][j];
    }
  }


/// END OF SOURCE TERMS

////////////////////////////////////////////////////////////////////////////

/// ADD EXTERNAL DATA

 /// Function to add the non-local exchange terms to external data
 void set_external_data(Mesh* &mesh_pt)
  {
   /// Number of nodes in mesh
   unsigned n_mesh_node = mesh_pt->nnode();
   
   /// Loop over all nodes in the domain
   for(unsigned mesh_nod=0;mesh_nod<n_mesh_node;mesh_nod++)
    {
     /// Set pointer to mesh nodes
     Node* mesh_node_pt =mesh_pt->node_pt(mesh_nod);
     
     /// Initialise the external boolean
     bool external=true;
     
     /// Loop over nodes in this element
     unsigned n_node=this->nnode();
     
     for(unsigned m=0;m<n_node;m++)
      {
       /// Set pointer to this elements nodes
       Node* node_pt =this->node_pt(m);
       
       /// Only external if mesh_node is not in this element
       if(node_pt == mesh_node_pt) {external=false;}
       
      } /// End of loop over nodes in this element
     
     /// If the data is external, add it
     if(external)
      {
       this->add_external_data(mesh_node_pt);
      }
     
    } /// End of loop over mesh nodes
     
  } /// End of set_external_data

////////////////////////////////////////////////////////////////////////////

 /// Get flux: flux[i] = du/dx_i
 void get_flux(const Vector<double>& s, Vector<double>& flux) const
  {
   //Find out how many nodes there are in the element
   const unsigned n_node = nnode();

   //Get the index at which the unknown is stored
   const unsigned u_nodal_index = u_index_hartree_fock();

   //Set up memory for the shape and test functions
   Shape psi(n_node);
   DShape dpsidx(n_node,DIM);
 
   //Call the derivatives of the shape and test functions
   dshape_eulerian(s,psi,dpsidx);
     
   //Initialise to zero
   for(unsigned j=0;j<DIM;j++)
    {
     flux[j] = 0.0;
    }
   
   // Loop over nodes
   for(unsigned l=0;l<n_node;l++) 
    {
     //Loop over derivative directions
     for(unsigned j=0;j<DIM;j++)
      {                               
       flux[j] += this->nodal_value(l,u_nodal_index)*dpsidx(l,j);
      }
    }
  }


 /// \short Add the element's contribution to the jacobian and mass matrix
 /// hierher: Why do we need the residuals vector?
 void fill_in_contribution_to_jacobian_and_mass_matrix(
  Vector<double> &residuals, DenseMatrix<double> &jacobian, 
  DenseMatrix<double> &mass_matrix);


/*  /// Add the element's contribution to its residual vector (wrapper) */
/*  void fill_in_contribution_to_residuals(Vector<double> &residuals) */
/*   { */
/*    //Call the generic residuals function with flag set to 0 */
/*    //using a dummy matrix argument */
/*    fill_in_generic_residual_contribution( */
/*     residuals,GeneralisedElement::Dummy_matrix,0); */
/*   } */

 
/*  /// Add the element's contribution to its residual vector and  */
/*  /// element Jacobian matrix (wrapper) */
/*  void fill_in_contribution_to_jacobian(Vector<double> &residuals, */
/*                                    DenseMatrix<double> &jacobian) */
/*   { */
/*    //Call the generic routine with the flag set to 1 */
/*    fill_in_generic_residual_contribution(residuals,jacobian,1); */
/*   } */
 

 /// \short Return FE representation of function value u_hartree_fock(s) 
 /// at local coordinate s. Index i specifies the nodal value.
 /// Only i=0 stores "active" values; the remaining nodal values
 /// are used to store previously computed eigenvectors. They 
 /// can be plotted by specifying a second, non-zero argument.
 inline double interpolated_u_hartree_fock(const Vector<double> &s,
                                           const unsigned &i) const
  {
   //Find number of nodes
   const unsigned n_node = nnode();

   //Get the index at which the hartree_fock unknown is stored
   //const unsigned u_nodal_index = u_index_hartree_fock();
   
   //Local shape function
   Shape psi(n_node);

   //Find values of shape function
   shape(s,psi);

   //Initialise value of u
   double interpolated_u = 0.0;

   //Loop over the local nodes and sum
   for(unsigned l=0;l<n_node;l++) 
    {
//     interpolated_u += this->nodal_value(l,u_nodal_index)*psi[l];
     interpolated_u += this->nodal_value(l,i)*psi[l];
    }

   return(interpolated_u);
  }


 /// \short Self-test: Return 0 for OK
 unsigned self_test();


protected:

 /// \short Shape/test functions and derivs w.r.t. to global coords at 
 /// local coord. s; return  Jacobian of mapping
 virtual double dshape_and_dtest_eulerian_hartree_fock(const Vector<double> &s, 
                                                  Shape &psi,
                                                  DShape &dpsidx, Shape &test, 
                                                  DShape &dtestdx) const=0;
 

 /// \short Shape/test functions and derivs w.r.t. to global coords at 
 /// integration point ipt; return  Jacobian of mapping
 virtual double dshape_and_dtest_eulerian_at_knot_hartree_fock(const unsigned &ipt, 
                                                          Shape &psi, 
                                                          DShape &dpsidx,
                                                          Shape &test, 
                                                          DShape &dtestdx) 
  const=0;

/*  /// \short Compute element residual Vector only (if flag=and/or element  */
/*  /// Jacobian matrix  */
/*  virtual void fill_in_generic_residual_contribution( */
/*   Vector<double> &residuals, DenseMatrix<double> &jacobian,  */
/*   unsigned flag);  */
 
 /// Pointer to nuclear source function:
 NuclearSourceFctPt Nuclear_source_fct_pt;

 /// Pointers to source vectors:
 RepulsionSourcePt Repulsion_source_pt;
 ExchangeSourcePt Exchange_source_pt;

 /// The element's index
 unsigned Element_number;

 /// Number of stored eigenvectors
 unsigned Nstored_eigenvectors;

 /// \short Static member data indicating which nodal value is to be plotted
 /// (a bit hacky but cheaper than having to loop over all 
 /// elements to tell them what to plot...)
 static unsigned Value_to_be_plotted;

};






///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////



//======================================================================
/// QHartreeFockElement elements are linear/quadrilateral/brick-shaped 
/// HartreeFock elements with isoparametric interpolation for the function.
//======================================================================
template <unsigned DIM, unsigned NNODE_1D>
 class QHartreeFockElement : public virtual QElement<DIM,NNODE_1D>,
 public virtual HartreeFockEquations<DIM>
{

private:

 /// \short Static int that holds the number of variables at 
 /// nodes: always the same
 static const unsigned Initial_Nvalue;
 
  public:


 ///\short  Constructor: Call constructors for QElement and 
 /// HartreeFock equations
 QHartreeFockElement() : QElement<DIM,NNODE_1D>(), HartreeFockEquations<DIM>()
  {}
 
 /// Broken copy constructor
 QHartreeFockElement(const QHartreeFockElement<DIM,NNODE_1D>& dummy) 
  { 
   BrokenCopy::broken_copy("QHartreeFockElement");
  } 
 
 /// Broken assignment operator
 void operator=(const QHartreeFockElement<DIM,NNODE_1D>&) 
  {
   BrokenCopy::broken_assign("QHartreeFockElement");
  }


 /// \short  Required  # of `values' (pinned or dofs) 
 /// at node n
 inline unsigned required_nvalue(const unsigned &n) const 
  {return Initial_Nvalue;}

 /// \short Output function:  
 ///  x,y,u   or    x,y,z,u
 void output(std::ostream &outfile)
  {HartreeFockEquations<DIM>::output(outfile);}


 ///  \short Output function:  
 ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
 void output(std::ostream &outfile, const unsigned &n_plot)
  {HartreeFockEquations<DIM>::output(outfile,n_plot);}


 /// \short C-style output function:  
 ///  x,y,u   or    x,y,z,u
 void output(FILE* file_pt)
  {HartreeFockEquations<DIM>::output(file_pt);}


 ///  \short C-style output function:  
 ///   x,y,u   or    x,y,z,u at n_plot^DIM plot points
 void output(FILE* file_pt, const unsigned &n_plot)
  {HartreeFockEquations<DIM>::output(file_pt,n_plot);}


 /// \short Output function for an exact solution:
 ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
 void output_fct(std::ostream &outfile, const unsigned &n_plot,
                 FiniteElement::SteadyExactSolutionFctPt exact_soln_pt)
  {HartreeFockEquations<DIM>::output_fct(outfile,n_plot,exact_soln_pt);}



 /// \short Output function for a time-dependent exact solution.
 ///  x,y,u_exact   or    x,y,z,u_exact at n_plot^DIM plot points
 /// (Calls the steady version)
 void output_fct(std::ostream &outfile, const unsigned &n_plot,
                 const double& time,
                 FiniteElement::UnsteadyExactSolutionFctPt exact_soln_pt)
  {HartreeFockEquations<DIM>::output_fct(outfile,n_plot,time,exact_soln_pt);}


protected:

/// Shape, test functions & derivs. w.r.t. to global coords. Return Jacobian.
 inline double dshape_and_dtest_eulerian_hartree_fock(
  const Vector<double> &s, Shape &psi, DShape &dpsidx, 
  Shape &test, DShape &dtestdx) const;


 /// \short Shape, test functions & derivs. w.r.t. to global coords. at
 /// integration point ipt. Return Jacobian.
 inline double dshape_and_dtest_eulerian_at_knot_hartree_fock(const unsigned& ipt,
                                                         Shape &psi, 
                                                         DShape &dpsidx, 
                                                         Shape &test,
                                                         DShape &dtestdx) 
  const;

};




//Inline functions:


//======================================================================
/// Define the shape functions and test functions and derivatives
/// w.r.t. global coordinates and return Jacobian of mapping.
///
/// Galerkin: Test functions = shape functions
//======================================================================
template<unsigned DIM, unsigned NNODE_1D>
 double QHartreeFockElement<DIM,NNODE_1D>::dshape_and_dtest_eulerian_hartree_fock(
  const Vector<double> &s,
  Shape &psi, 
  DShape &dpsidx,
  Shape &test, 
  DShape &dtestdx) const
{
 //Call the geometrical shape functions and derivatives  
 const double J = this->dshape_eulerian(s,psi,dpsidx);

 //Set the test functions equal to the shape functions
 test = psi;
 dtestdx= dpsidx;
 
 //Return the jacobian
 return J;
}




//======================================================================
/// Define the shape functions and test functions and derivatives
/// w.r.t. global coordinates and return Jacobian of mapping.
///
/// Galerkin: Test functions = shape functions
//======================================================================
template<unsigned DIM, unsigned NNODE_1D>
double QHartreeFockElement<DIM,NNODE_1D>::
 dshape_and_dtest_eulerian_at_knot_hartree_fock(
  const unsigned &ipt,
  Shape &psi, 
  DShape &dpsidx,
  Shape &test, 
  DShape &dtestdx) const
{
 //Call the geometrical shape functions and derivatives  
 const double J = this->dshape_eulerian_at_knot(ipt,psi,dpsidx);

 //Set the pointers of the test functions
 test = psi;
 dtestdx = dpsidx;

 //Return the jacobian
 return J;
}

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////



//=======================================================================
/// Face geometry for the QHartreeFockElement elements: The spatial 
/// dimension of the face elements is one lower than that of the
/// bulk element but they have the same number of points
/// along their 1D edges.
//=======================================================================
template<unsigned DIM, unsigned NNODE_1D>
class FaceGeometry<QHartreeFockElement<DIM,NNODE_1D> >: 
 public virtual QElement<DIM-1,NNODE_1D>
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional QElement
 FaceGeometry() : QElement<DIM-1,NNODE_1D>() {}

};

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////


//=======================================================================
/// Face geometry for the 1D QHartreeFockElement elements: Point elements
//=======================================================================
template<unsigned NNODE_1D>
class FaceGeometry<QHartreeFockElement<1,NNODE_1D> >: 
 public virtual PointElement
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional QElement
 FaceGeometry() : PointElement() {}

};



////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////


}

#endif
