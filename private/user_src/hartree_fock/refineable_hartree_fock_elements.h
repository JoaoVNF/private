//LIC// ====================================================================
//LIC// This file forms part of oomph-lib, the object-oriented, 
//LIC// multi-physics finite-element library, available 
//LIC// at http://www.oomph-lib.org.
//LIC// 
//LIC//           Version 0.90. August 3, 2009.
//LIC// 
//LIC// Copyright (C) 2006-2009 Matthias Heil and Andrew Hazel
//LIC// 
//LIC// This library is free software; you can redistribute it and/or
//LIC// modify it under the terms of the GNU Lesser General Public
//LIC// License as published by the Free Software Foundation; either
//LIC// version 2.1 of the License, or (at your option) any later version.
//LIC// 
//LIC// This library is distributed in the hope that it will be useful,
//LIC// but WITHOUT ANY WARRANTY; without even the implied warranty of
//LIC// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
//LIC// Lesser General Public License for more details.
//LIC// 
//LIC// You should have received a copy of the GNU Lesser General Public
//LIC// License along with this library; if not, write to the Free Software
//LIC// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
//LIC// 02110-1301  USA.
//LIC// 
//LIC// The authors may be contacted at oomph-lib@maths.man.ac.uk.
//LIC// 
//LIC//====================================================================
// /Header file for refineable QHartreeFockElement elements

#ifndef OOMPH_REFINEABLE_HARTREE_FOCK_ELEMENTS_HEADER
#define OOMPH_REFINEABLE_HARTREE_FOCK_ELEMENTS_HEADER

/// Config header generated by autoconfig
#ifdef HAVE_CONFIG_H
  #include <oomph-lib-config.h>
#endif


/// oomph-lib headers
#include "../generic/refineable_quad_element.h"
#include "../generic/refineable_brick_element.h"
#include "../generic/error_estimator.h"
#include "hartree_fock_elements.h"

namespace oomph
{

///////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////



//======================================================================
/// Refineable version of Hartree-Fock equations
//======================================================================
template <unsigned DIM>
class RefineableHartreeFockEquations : public virtual HartreeFockEquations<DIM>,
                                   public virtual RefineableElement,
                                   public virtual ElementWithZ2ErrorEstimator
{
  public:

 /// \short Constructor, simply call other constructors
 RefineableHartreeFockEquations() : HartreeFockEquations<DIM>(),
  RefineableElement(), ElementWithZ2ErrorEstimator() 
  { } 

 /// Broken copy constructor
 RefineableHartreeFockEquations(const RefineableHartreeFockEquations<DIM>& dummy) 
  { 
   BrokenCopy::broken_copy("RefineableHartreeFockEquations");
  } 
 
 /// Broken assignment operator
 void operator=(const RefineableHartreeFockEquations<DIM>&) 
  {
   BrokenCopy::broken_assign("RefineableHartreeFockEquations");
  }

 /// Number of flux terms.
 unsigned num_Z2_flux_terms()
  {
   unsigned num_flux = this->Nstored_eigenvectors*DIM;
   return num_flux; 
  }

 /// Get 'flux' for each eigenvector. 
 void get_Z2_flux(const Vector<double>& s, Vector<double>& flux_Z2) 
  { 
      
   /// Find out how many nodes there are in the element 
   const unsigned n_node = nnode(); 

   /// Set up memory for the shape and test functions 
   Shape psi(n_node); 
   DShape dpsidx(n_node,DIM); 
 
   /// Call the derivatives of the shape and test functions 
   dshape_eulerian(s,psi,dpsidx); 
     
   /// Initialise flux to zero
   for(unsigned j=0;j<num_Z2_flux_terms();j++)
    { 
     flux_Z2[j] = 0.0; 
    } 
   
   /// Initialise count label 
   unsigned count=0; 

   /// Loop over eigenfunctions
   for(unsigned e=0;e<this->Nstored_eigenvectors;e++) 
    {     
     /// Loop over derivative directions 
     for(unsigned d=0;d<DIM;d++) 
      { 
       /// Loop over nodes and sum up the flux values.
       for(unsigned l=0;l<n_node;l++)  
        {
         flux_Z2[count] += this->nodal_value(l,e)*dpsidx(l,d); 
        } 
       /// Increment count label. 
       count += 1; 
      } 
    } 
  } 

 /// \short Get the function value u in Vector.
 void get_interpolated_values(const Vector<double>&s,  Vector<double>& values)
  {
   /// Set size of vector to number of values at first node. 
   values.resize(node_pt(1)->nvalue());
  
   /// Find number of nodes  
   unsigned n_node = nnode();  
  
   /// Local shape function  
   Shape psi(n_node);  
  
   /// Find values of shape function  
   shape(s,psi);  

   /// Loop over each element of 'value'. 
   for(unsigned i=0;i<values.size();i++) 
    { 
     /// Initialise the value 
     values[i]=0.0; 
    
     /// Loop over local nodes and sum up the values 
     for(unsigned l=0;l<n_node;l++) 
      { 
       values[i] += this->nodal_value(l,i)*psi[l]; 
      } 
    } 
  } 
 
 /// If time dependent, throw error. 
 void get_interpolated_values(const unsigned& t, const Vector<double>&s,
                              Vector<double>& values)
  {
   if (t!=0)
    {
     std::string error_message =
      "Time-dependent version of get_interpolated_values() ";
     error_message += "not implemented for this element \n";
     throw 
      OomphLibError(error_message,
                    "RefineableHartreeFockEquations::get_interpolated_values()",
                    OOMPH_EXCEPTION_LOCATION);
    }
   else
    {
     // /Make sure that we call this particular object's steady 
     /// get_interpolated_values (it could get overloaded lower down)
     RefineableHartreeFockEquations<DIM>::get_interpolated_values(s,values);
    }
  }

 
 ///  Further build: Copy source function pointers from father element
 void further_build()
  {
   this->Nuclear_source_fct_pt=dynamic_cast<RefineableHartreeFockEquations<DIM>*>(
    this->father_element_pt())->nuclear_source_fct_pt();

   this->Repulsion_source_pt=dynamic_cast<RefineableHartreeFockEquations<DIM>*>(
    this->father_element_pt())->repulsion_source_pt();

   this->Exchange_source_pt=dynamic_cast<RefineableHartreeFockEquations<DIM>*>(
    this->father_element_pt())->exchange_source_pt();

   this->create_storage_for_eigenvectors(
    dynamic_cast<RefineableHartreeFockEquations<DIM>*>(
     this->father_element_pt())->nstored_eigenvectors());
  }



 /// \short Add the element's contribution to the jacobian and mass matrix
 /// hierher: Why do we need the residuals vector?
 void fill_in_contribution_to_jacobian_and_mass_matrix(
  Vector<double> &residuals, DenseMatrix<double> &jacobian, 
  DenseMatrix<double> &mass_matrix);


  private:

/* /// \short Add element's contribution to elemental residual vector and/or  */
/* /// Jacobian matrix  */
/* /// flag=1: compute both */
/* /// flag=0: compute only residual vector */
/* void fill_in_generic_residual_contribution(Vector<double> &residuals,  */
/*                                        DenseMatrix<double> &jacobian,  */
/*                                        unsigned flag);  */

};


//======================================================================
/// Refineable version of 2D QHartreeFockElement elements
///
///
//======================================================================
template <unsigned DIM, unsigned NNODE_1D>
 class RefineableQHartreeFockElement : 
 public QHartreeFockElement<DIM,NNODE_1D>,
 public virtual RefineableHartreeFockEquations<DIM>,
 public virtual RefineableQElement<DIM>
{
  public:

 /// \short Constructor, simply call the other constructors 
 RefineableQHartreeFockElement() : 
  RefineableElement(),
  RefineableHartreeFockEquations<DIM>(),
  RefineableQElement<DIM>(),
  QHartreeFockElement<DIM,NNODE_1D>()
   {} 


 /// Broken copy constructor
 RefineableQHartreeFockElement(const RefineableQHartreeFockElement<DIM,NNODE_1D>& 
                           dummy) 
  { 
   BrokenCopy::broken_copy("RefineableQuadHartreeFockElement");
  } 
 
 /// Broken assignment operator
 void operator=(const RefineableQHartreeFockElement<DIM,NNODE_1D>&) 
  {
   BrokenCopy::broken_assign("RefineableQuadHartreeFockElement");
  }

 /// Number of continuously interpolated values.
 unsigned ncont_interpolated_values() const {return 2;} //ashflag

 /// \short Number of vertex nodes in the element
 unsigned nvertex_node() const
  {return QHartreeFockElement<DIM,NNODE_1D>::nvertex_node();}

 /// \short Pointer to the j-th vertex node in the element
 Node* vertex_node_pt(const unsigned& j) const
  {return QHartreeFockElement<DIM,NNODE_1D>::vertex_node_pt(j);}

 /// Rebuild from sons: empty
 void rebuild_from_sons(Mesh* &mesh_pt) {}

 /// \short Order of recovery shape functions for Z2 error estimation:
 /// Same order as shape functions.
 unsigned nrecovery_order() {return (NNODE_1D-1);}

 ///  \short Perform additional hanging node procedures for variables
 /// that are not interpolated by all nodes. Empty.
 void further_setup_hanging_nodes(){}

};
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////



//=======================================================================
/// Face geometry for the RefineableQuadHartreeFockElement elements: The spatial 
/// dimension of the face elements is one lower than that of the
/// bulk element but they have the same number of points
/// along their 1D edges.
//=======================================================================
template<unsigned DIM, unsigned NNODE_1D>
class FaceGeometry<RefineableQHartreeFockElement<DIM,NNODE_1D> >: 
 public virtual QElement<DIM-1,NNODE_1D>
{

  public:
 
 /// \short Constructor: Call the constructor for the
 /// appropriate lower-dimensional QElement
 FaceGeometry() : QElement<DIM-1,NNODE_1D>() {}

};

}

#endif

